#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
"""

__author__ = 'Yuta Hayashibe' 
__version__ = ""
__copyright__ = ""
__license__ = "GPL v3"

import slex
import sys

import json
import codecs
sys.stdout = codecs.getwriter('utf_8')(sys.stdout)



import cPickle as pickle
if __name__=='__main__':
    if len(sys.argv) <= 2:
        sys.stderr.write("[Usage] slex jar-file-path model-file-path [options]\n")
        quit()

    output_style = u"json"

    options = sys.argv[:]
    options.pop(0) #remove this filename

    jar_path = unicode(options.pop(0))
    model_fname = unicode(options.pop(0))

    if len(options)>0:
        if options[0] == u"--normal":
            output_style = u"normal"
            options.pop(0)
        elif options[0] == u"--pickle":
            output_style = u"pickle"
            options.pop(0)
        elif options[0] == u"--tpickle":
            output_style = u"tpickle"
            options.pop(0)
        elif options[0] == u"--json":
            output_style = u"json"
            options.pop(0)

    options = tuple(options)

    parser = slex.StanfordParser(jar_path, model_fname, options)


    import sys
    enc = sys.stdin.encoding
    if enc is None:
        enc = sys.getfilesystemencoding()

    for line in iter(sys.stdin.readline, ""):
        try:
            parsd_sentence = parser.parse(unicode(line.strip(), enc))
            if output_style == u"json":
                outdic = parsd_sentence.asDictionary()
                json.dump(outdic, sys.stdout, ensure_ascii=False)
                sys.stdout.write(u"\n")
            elif output_style == u"pickle":
                print pickle.dumps(parsd_sentence, protocol=0)
            elif output_style == u"tpickle":
                print pickle.dumps(parsd_sentence, protocol=0).replace(u"\n", u"\t")
            else:
                print unicode(parsd_sentence)
        except:
            raise
            sys.stderr.write("[*] Parsing Error!!\n")

